# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT MANUALLY.

from typing import (
    Any,
    Callable,
    ClassVar,
    FrozenSet,
    Iterable,
    List,
    Mapping,
    Optional,
    Sequence,
    Set,
    Union,
)

from html.parser import HTMLParser
from pathlib import Path as FSPath
from types import SimpleNamespace
from xml.etree.ElementTree import Element

XPather = Callable[[Element], Union[Sequence[str], Sequence[Element]]]
Extractor = Callable[[Element], Any]
Reducer = Callable[[Sequence[str]], str]
PathTransformer = Callable[[str], Any]
MapTransformer = Callable[[Mapping], Any]
Transformer = Union[PathTransformer, MapTransformer]
Ruler = Callable[[Element], Mapping]

__version__ = ...  # type: str
LXML_AVAILABLE = ...  # type: bool
preprocessors = ...  # type: SimpleNamespace
reducers = ...  # type: SimpleNamespace
transformers = ...  # type: SimpleNamespace
YAML_AVAILABLE = ...  # type: bool


class HTMLNormalizer(HTMLParser):
    VOID_ELEMENTS = ...  # type: ClassVar[FrozenSet[str]]
    omit_tags = ...  # type: Set[str]
    omit_attrs = ...  # type: Set[str]
    def __init__(
        self,
        *,
        omit_tags: Optional[Iterable[str]] = ...,
        omit_attrs: Optional[Iterable[str]] = ...,
    ) -> None: ...

def html_to_xhtml(
    document: str,
    *,
    omit_tags: Optional[Iterable[str]] = ...,
    omit_attrs: Optional[Iterable[str]] = ...,
) -> str: ...
def make_xpather(path: str) -> XPather: ...
def make_extractor(
    type_: str,
    *,
    path: Optional[str] = ...,
    reduce: Optional[Reducer] = ...,
    rules: Sequence[Ruler] = ...,
    section: Optional[str] = ...,
    transform: Optional[Transformer] = ...,
    foreach: Optional[str] = ...,
) -> Callable[[Element], Any]: ...
def make_extractor_from_map(desc: Mapping) -> Extractor: ...
def Rule(
    key: Union[str, Extractor],
    extractor: Extractor,
    *,
    foreach: Optional[str] = ...,
) -> Ruler: ...
def make_rule_from_map(desc: Mapping) -> Ruler: ...
def remove_elements(root: Element, *, path: str) -> None: ...
def set_element_attr(
    root: Element,
    *,
    path: str,
    name: Union[str, Mapping],
    value: Union[str, Mapping],
) -> None: ...
def set_element_text(
    root: Element, *, path: str, text: Union[str, Mapping]
) -> None: ...
def build_tree(document: str, *, lxml_html: bool = ...) -> Element: ...
def preprocess(root: Element, pre: Sequence[Mapping]) -> None: ...
def extract(
    element: Element, items: Sequence[Mapping], *, section: Optional[str] = ...
) -> Mapping: ...
def scrape(
    document: str, spec: Mapping, *, lxml_html: bool = ...
) -> Mapping: ...
def load_spec(path: FSPath) -> Mapping: ...
def main(argv: Optional[List[str]] = ...) -> None: ...
