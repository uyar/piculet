# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT MANUALLY.

from typing import (
    Any,
    Callable,
    ClassVar,
    FrozenSet,
    Iterable,
    List,
    Mapping,
    Optional,
    Sequence,
    Union,
)

from html.parser import HTMLParser
from types import SimpleNamespace
from xml.etree.ElementTree import Element

XPather = Callable[[Element], Union[Sequence[str], Sequence[Element]]]
Reducer = Callable[[Sequence[str]], str]
StrExtractor = Callable[[Element], str]
MapExtractor = Callable[[Element], Mapping]
StrTransformer = Callable[[str], Any]
MapTransformer = Callable[[Mapping], Any]
Transformer = Union[StrTransformer, MapTransformer]
Extractor = Callable[[Element], Any]

__version__ = ...  # type: str
preprocessors = ...  # type: SimpleNamespace
reducers = ...  # type: SimpleNamespace
transformers = ...  # type: SimpleNamespace


class HTMLNormalizer(HTMLParser):
    VOID_ELEMENTS = ...  # type: ClassVar[FrozenSet[str]]
    omit_tags = ...  # type: FrozenSet[str]
    omit_attrs = ...  # type: FrozenSet[str]
    def __init__(
        self, *, omit_tags: Iterable[str] = ..., omit_attrs: Iterable[str] = ...
    ) -> None: ...

def html_to_xhtml(
    document: str,
    *,
    omit_tags: Iterable[str] = ...,
    omit_attrs: Iterable[str] = ...,
) -> str: ...
def build_tree(document: str, *, lxml_html: bool = ...) -> Element: ...
def make_xpather(path: str) -> XPather: ...
def make_path(
    path: str,
    reduce: Optional[Reducer] = ...,
    transform: Optional[StrTransformer] = ...,
    foreach: Optional[str] = ...,
) -> Extractor: ...
def make_items(
    rules: Sequence[MapExtractor],
    section: Optional[str] = ...,
    transform: Optional[MapTransformer] = ...,
    foreach: Optional[str] = ...,
) -> Extractor: ...
def make_rule(
    key: Union[str, StrExtractor],
    value: Extractor,
    *,
    foreach: Optional[str] = ...,
) -> MapExtractor: ...
def remove_elements(root: Element, *, path: str) -> None: ...
def set_element_attr(
    root: Element,
    *,
    path: str,
    name: Union[str, StrExtractor],
    value: Union[str, StrExtractor],
) -> None: ...
def set_element_text(
    root: Element, *, path: str, text: Union[str, StrExtractor]
) -> None: ...
def scrape(
    document: str, spec: Mapping, *, lxml_html: bool = ...
) -> Mapping: ...
def load_spec(filepath: str) -> Mapping: ...
def main(argv: Optional[List[str]] = ...) -> None: ...
